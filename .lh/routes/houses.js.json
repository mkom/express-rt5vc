{
    "sourceFile": "routes/houses.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1722425648499,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1722425821869,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,9 +199,9 @@\n         house.monthly_fees = monthly_fees || house.monthly_fees;\n         house.resident_name = resident_name || house.resident_name;\n         house.fee = fee || house.fee;\n         house.occupancy_status = occupancy_status || house.occupancy_status;\n-        whatsapp_number = whatsapp_number || house.whatsapp_number\n+        house.whatsapp_number = whatsapp_number || house.whatsapp_number;\n \n \n         await house.save();\n         res.status(200).json(house);\n"
                }
            ],
            "date": 1722425648499,
            "name": "Commit-0",
            "content": "const express = require('express');\nconst House = require('../models/house');\nconst protect = require('./protect');\nconst checkRole = require('./checkRole');\nconst router = express.Router();\n\n// Create a new house\nrouter.post('/create', protect, checkRole(['admin', 'editor','superadmin']), async (req, res) => {\n    const { house_id, resident_name,  auto_bill_date, fee, occupancy_status } = req.body;\n\n    try {\n        let house = new House({\n            house_id,\n            resident_name,\n            auto_bill_date,\n            fee,\n            occupancy_status\n        });\n\n        await house.save();\n        res.status(201).json(house);\n    } catch (err) {\n        console.error(err.message);\n        res.status(500).send('Server error');\n    }\n});\n\n// Get all houses\nrouter.get('/all', protect, checkRole(['admin', 'editor','superadmin']), async (req, res) => {\n    try {\n        const houses = await House.find().populate('user_ids').populate('monthly_fees.transaction_id');\n        res.status(200).json(houses);\n    } catch (err) {\n        console.error(err.message);\n        res.status(500).send('Server error');\n    }\n});\n\nrouter.get('/fee', async (req, res) => {\n    const {period, status} = req.query; \n\n    const matchConditions = {};\n    if (period) {\n        matchConditions['monthly_fees.month'] = period;\n    }\n    if (status) {\n        matchConditions['monthly_fees.status'] = status;\n    }\n\n    //console.log(req.query)\n\n    try {\n\n        const aggregationPipeline = [\n            { $unwind: '$monthly_fees' },\n            { $match: matchConditions },\n            {\n                $lookup: {\n                    from: 'transactions', // Koleksi yang akan di-join\n                    localField: 'monthly_fees.transaction_id',\n                    foreignField: '_id',\n                    as: 'transaction_details'\n                }\n            },\n            {\n                $addFields: {\n                    'monthly_fees.transaction_date': {\n                        $arrayElemAt: ['$transaction_details.date', 0]\n                    }\n                }\n            },\n            {\n                $group: {\n                    _id: '$_id',\n                    house_id: { $first: '$house_id' },\n                    monthly_fees: {\n                        $push: {\n                            month: '$monthly_fees.month',\n                            status: '$monthly_fees.status',\n                            fee: '$monthly_fees.fee',\n                            transaction_date: '$monthly_fees.transaction_date'\n                        }\n                    }\n                }\n            },\n            { $sort: { house_id: 1 } },\n        ];\n\n        const houses = await House.aggregate(aggregationPipeline);\n\n        const totalPaid = houses.reduce((acc, house) => {\n            const paidFees = house.monthly_fees.filter(fee => fee.status === 'Lunas');\n            const total = paidFees.reduce((sum, fee) => sum + fee.fee, 0);\n            return acc + total;\n        }, 0);\n\n        const totalUnpaid = houses.reduce((acc, house) => {\n            const unpaidFees = house.monthly_fees.filter(fee => fee.status !== 'Lunas');\n            const total = unpaidFees.reduce((sum, fee) => sum + fee.fee, 0);\n            return acc + total;\n        }, 0);\n\n        const totalHousesPaid = houses.filter(house => {\n            const paidFees = house.monthly_fees.filter(fee => fee.status === 'Lunas');\n            return paidFees.length > 0;\n        }).length;\n\n        const totalHouseUnpaid = houses.length - totalHousesPaid;\n        const percentage = (totalHousesPaid / houses.length) * 100;\n        const roundedPercentage = percentage.toFixed(2); // membulatkan menjadi 2 desimal\n\n        const result = {\n            data: houses,\n            total: houses.length,\n            total_paid: totalPaid,\n            total_unpaid: totalUnpaid,\n            total_houses_paid: totalHousesPaid,\n            total_houses_unpaid: totalHouseUnpaid,\n            percentage_paid: roundedPercentage+'%'\n        };\n\n        return res.json(result);\n\n    } catch(err){\n        console.error(err.message);\n        res.status(500).send('Server error');\n    }\n\n    // if (!period) {\n    //     return res.status(400).json({ error: 'Period is required' });\n    // }\n\n    // try {\n    //     if (period) {\n    //         // Hitung jumlah rumah yang memiliki status \"Lunas\" pada bulan tertentu\n    //         const housesCount = await House.countDocuments({\n    //             'monthly_fees': {\n    //                 $elemMatch: {\n    //                     month: period,\n    //                     status: 'Lunas'\n    //                 }\n    //             }\n    //         });\n\n    //         return res.json({ totalHouses: housesCount });\n    //     } else {\n    //         // Ambil detail rumah yang memiliki status \"Lunas\" pada bulan tertentu\n    //         const houses = await House.aggregate([\n    //             { $match: { 'monthly_fees.month': period, 'monthly_fees.status': 'Lunas' } },\n    //             { $unwind: '$monthly_fees' },\n    //             { $match: { 'monthly_fees.month': period, 'monthly_fees.status': 'Lunas' } },\n    //             { $group: {\n    //                 _id: '$_id',\n    //                 house_id: { $first: '$house_id' },\n    //                 resident_name: { $first: '$resident_name' },\n    //                 auto_bill_date: { $first: '$auto_bill_date' },\n    //                 fee: { $first: '$fee' },\n    //                 occupancy_status: { $first: '$occupancy_status' },\n    //                 monthly_fees: { $push: '$monthly_fees' },\n    //                 user_ids: { $first: '$user_ids' }\n    //             }}\n    //         ]);\n\n    //         return res.json(houses);\n    //     }\n    // } catch (error) {\n    //     console.error('Error fetching houses fees:', error);\n    //     res.status(500).json({ error: 'Error fetching houses fees' });\n    // }\n});\n\n// Get a single house by ID\nrouter.get('/:id', protect, checkRole(['admin', 'editor']), async (req, res) => {\n    try {\n        const house = await House.findById(req.params.id).populate('user_ids').populate('monthly_fees.transaction_id');\n        if (!house) {\n            return res.status(404).json({ msg: 'House not found' });\n        }\n        res.status(200).json(house);\n    } catch (err) {\n        console.error(err.message);\n        res.status(500).send('Server error');\n    }\n});\n\n// Update a house\nrouter.put('/update/:id', protect, checkRole(['admin', 'editor','superadmin']), async (req, res) => {\n    const { house_id, user_ids, whatsapp_number, auto_bill_date, monthly_fees, resident_name, fee, occupancy_status  } = req.body;\n\n    try {\n        let house = await House.findById(req.params.id);\n        if (!house) {\n            return res.status(404).json({ msg: 'House not found' });\n        }\n\n        house.house_id = house_id || house.house_id;\n        house.user_ids = user_ids || house.user_ids;\n        house.auto_bill_date = auto_bill_date || house.auto_bill_date;\n        house.monthly_fees = monthly_fees || house.monthly_fees;\n        house.resident_name = resident_name || house.resident_name;\n        house.fee = fee || house.fee;\n        house.occupancy_status = occupancy_status || house.occupancy_status;\n        whatsapp_number = whatsapp_number || house.whatsapp_number\n\n\n        await house.save();\n        res.status(200).json(house);\n    } catch (err) {\n        console.error(err.message);\n        res.status(500).send('Server error');\n    }\n});\n\n// Delete a house\nrouter.delete('/delete/:id', protect, checkRole(['admin', 'editor','superadmin']), async (req, res) => {\n    try {\n        const house = await House.findById(req.params.id);\n        if (!house) {\n            return res.status(404).json({ msg: 'House not found' });\n        }\n\n        await house.remove();\n        res.status(200).json({ msg: 'House removed' });\n    } catch (err) {\n        console.error(err.message);\n        res.status(500).send('Server error');\n    }\n});\n\n// router.get('/lunas', protect, checkRole(['admin', 'editor', 'superadmin', 'user']), async (req, res) => {\n//     const { period, count } = req.query; // Get the period and count query parameters\n\n//     if (!period) {\n//         return res.status(400).json({ error: 'Period is required' });\n//     }\n\n//     try {\n//         if (count === 'true') {\n//             // Hitung jumlah rumah yang memiliki status \"Lunas\" pada bulan tertentu\n//             const housesCount = await House.countDocuments({\n//                 'monthly_fees': {\n//                     $elemMatch: {\n//                         month: period,\n//                         status: 'Lunas'\n//                     }\n//                 }\n//             });\n\n//             return res.json({ totalHouses: housesCount });\n//         } else {\n//             // Ambil detail rumah yang memiliki status \"Lunas\" pada bulan tertentu\n//             const houses = await House.aggregate([\n//                 { $match: { 'monthly_fees.month': period, 'monthly_fees.status': 'Lunas' } },\n//                 { $unwind: '$monthly_fees' },\n//                 { $match: { 'monthly_fees.month': period, 'monthly_fees.status': 'Lunas' } },\n//                 { $group: {\n//                     _id: '$_id',\n//                     house_id: { $first: '$house_id' },\n//                     resident_name: { $first: '$resident_name' },\n//                     auto_bill_date: { $first: '$auto_bill_date' },\n//                     fee: { $first: '$fee' },\n//                     occupancy_status: { $first: '$occupancy_status' },\n//                     monthly_fees: { $push: '$monthly_fees' },\n//                     user_ids: { $first: '$user_ids' }\n//                 }}\n//             ]);\n\n//             return res.json(houses);\n//         }\n//     } catch (error) {\n//         console.error('Error fetching houses with lunas fees:', error);\n//         res.status(500).json({ error: 'Error fetching houses with lunas fees' });\n//     }\n// });\n\n\n\n\n\n\n\n\n\n\nmodule.exports = router;\n"
        }
    ]
}