{
    "sourceFile": "routes/transactions.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1722400977266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1722401129692,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,9 +142,9 @@\n         }\n       }\n   \n       // Hapus transaksi\n-      await transaction.remove();\n+      await transaction.delete();\n   \n       res.status(200).json({ message: 'Transaksi berhasil dihapus' });\n     } catch (err) {\n       console.error(err.message);\n"
                },
                {
                    "date": 1722401164188,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,9 +142,9 @@\n         }\n       }\n   \n       // Hapus transaksi\n-      await transaction.delete();\n+      await transaction.deleteOne();\n   \n       res.status(200).json({ message: 'Transaksi berhasil dihapus' });\n     } catch (err) {\n       console.error(err.message);\n"
                },
                {
                    "date": 1722401540950,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,9 +136,15 @@\n       if (transaction.house_id) {\n         const house = await House.findById(transaction.house_id);\n         if (house) {\n           // Hapus transaksi dari house\n-          house.monthly_fees = house.monthly_fees.filter(fee => fee.transaction_id !== transaction._id);\n+          house.monthly_fees = house.monthly_fees.map(fee => {\n+            if (fee.transaction_id === transaction._id) {\n+              fee.status = 'Belum Bayar';\n+              fee.transaction_id = null;\n+            }\n+            return fee;\n+          });\n           await house.save();\n         }\n       }\n   \n"
                },
                {
                    "date": 1722405831921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,18 +134,29 @@\n   \n       // Cek jika transaksi terkait dengan house\n       if (transaction.house_id) {\n         const house = await House.findById(transaction.house_id);\n-        if (house) {\n-          // Hapus transaksi dari house\n-          house.monthly_fees = house.monthly_fees.map(fee => {\n-            if (fee.transaction_id === transaction._id) {\n-              fee.status = 'Belum Bayar';\n-              fee.transaction_id = null;\n-            }\n-            return fee;\n-          });\n-          await house.save();\n+        // if (house) {\n+        //   // Hapus transaksi dari house\n+        //   house.monthly_fees = house.monthly_fees.map(fee => {\n+        //     if (fee.transaction_id === transaction._id) {\n+        //       fee.status = 'Belum Bayar';\n+        //       fee.transaction_id = null;\n+        //     }\n+        //     return fee;\n+        //   });\n+        //   await house.save();\n+        // }\n+\n+        // Update the related monthly bills\n+        for (const month of related_months) {\n+            let  feeIndex = house.monthly_fees.findIndex(fee => fee.month === month);\n+\n+            if (feeIndex !== -1) {\n+                // Update existing monthly fee\n+                house.monthly_fees[feeIndex].status = 'Belum Lunas';\n+                house.monthly_fees[feeIndex].transaction_id = transaction._id;\n+            } e\n         }\n       }\n   \n       // Hapus transaksi\n"
                },
                {
                    "date": 1722405843255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,9 +153,9 @@\n \n             if (feeIndex !== -1) {\n                 // Update existing monthly fee\n                 house.monthly_fees[feeIndex].status = 'Belum Lunas';\n-                house.monthly_fees[feeIndex].transaction_id = transaction._id;\n+                house.monthly_fees[feeIndex].transaction_id = null;\n             } e\n         }\n       }\n   \n"
                },
                {
                    "date": 1722405860772,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,9 +147,9 @@\n         //   await house.save();\n         // }\n \n         // Update the related monthly bills\n-        for (const month of related_months) {\n+        for (const month of transaction.related_months) {\n             let  feeIndex = house.monthly_fees.findIndex(fee => fee.month === month);\n \n             if (feeIndex !== -1) {\n                 // Update existing monthly fee\n"
                },
                {
                    "date": 1722405890451,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -154,9 +154,11 @@\n             if (feeIndex !== -1) {\n                 // Update existing monthly fee\n                 house.monthly_fees[feeIndex].status = 'Belum Lunas';\n                 house.monthly_fees[feeIndex].transaction_id = null;\n-            } e\n+            } \n+\n+            await house.save();\n         }\n       }\n   \n       // Hapus transaksi\n"
                },
                {
                    "date": 1722405965583,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -152,9 +152,9 @@\n             let  feeIndex = house.monthly_fees.findIndex(fee => fee.month === month);\n \n             if (feeIndex !== -1) {\n                 // Update existing monthly fee\n-                house.monthly_fees[feeIndex].status = 'Belum Lunas';\n+                house.monthly_fees[feeIndex].status = 'Belum Bayar';\n                 house.monthly_fees[feeIndex].transaction_id = null;\n             } \n \n             await house.save();\n"
                },
                {
                    "date": 1722415053197,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -211,9 +211,9 @@\n             \n             const formattedTransactions = transactions.map(transaction => ({\n                 ...transaction._doc,\n                 date: format(new Date(transaction.date), 'dd MMM yyyy'),\n-                created_at: format(new Date(transaction.created_at), 'dd MMM yyyy HH:mm:ss'),\n+                //created_at: format(new Date(transaction.created_at), 'dd MMM yyyy HH:mm:ss'),\n             }));\n     \n             res.status(200).json({ data: formattedTransactions });\n         } catch (err) {\n"
                },
                {
                    "date": 1722415247852,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -211,9 +211,9 @@\n             \n             const formattedTransactions = transactions.map(transaction => ({\n                 ...transaction._doc,\n                 date: format(new Date(transaction.date), 'dd MMM yyyy'),\n-                //created_at: format(new Date(transaction.created_at), 'dd MMM yyyy HH:mm:ss'),\n+                created_at: format(new Date(transaction.created_at), 'dd MMM yyyy HH:mm:ss'),\n             }));\n     \n             res.status(200).json({ data: formattedTransactions });\n         } catch (err) {\n"
                },
                {
                    "date": 1722415308437,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -187,9 +187,13 @@\n                 date: format(new Date(transaction.date), 'dd MMM yyyy'),\n                 created_at: format(new Date(transaction.created_at), 'dd MMM yyyy HH:mm:ss')\n             }));\n     \n+            if (transactions.length > 0 && transactions[0].created_at) {\n             res.status(200).json({ data: formattedTransactions, lastUpdate: format(transactions[0].created_at, 'dd MMM yyyy HH:mm') });\n+            } else {\n+            res.status(200).json({ data: formattedTransactions });\n+            }\n         } catch (err) {\n             console.error(err.message);\n             res.status(500).send('Server error');\n         }\n"
                },
                {
                    "date": 1722415391393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -103,9 +103,9 @@\n   \n     try {\n       let transaction = await Transaction.findById(req.params.id);\n       if (!transaction) {\n-        return res.status(404).json({ msg: 'Transaction not found' });\n+        return res.status(404).json({ message: 'Transaction not found' });\n       }\n   \n       transaction.house_id = house_id;\n       transaction.transaction_type = transaction_type;\n"
                },
                {
                    "date": 1722415829405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,366 @@\n+const express = require('express');\n+const router = express.Router();\n+const mongoose = require('mongoose');\n+const House = require('../models/house');\n+const Transaction = require('../models/transaction');\n+const protect = require('./protect');\n+const checkRole = require('./checkRole');\n+const { format } = require('date-fns');\n+\n+\n+\n+// Create a new transaction\n+router.post('/create', protect, checkRole(['admin', 'editor','superadmin']), async (req, res) => {\n+    const { houseId, transaction_type, payment_type, amount, description, proof_of_transfer, related_months,status,paymentDate  } = req.body;\n+    const created_by = req.user._id;\n+    try {\n+        // Find the house\n+\n+        //const houseId = req.body.houseId;\n+       // console.log('houseId:', houseId);\n+        const house = await House.findOne({ house_id: houseId });\n+        //console.log(house)\n+        if(transaction_type !== 'ipl') {\n+            const transaction = new Transaction({\n+                transaction_type,\n+                payment_type,\n+                amount,\n+                description,\n+                proof_of_transfer,\n+                created_by,\n+                status,\n+                date:paymentDate\n+            });\n+    \n+            await transaction.save();\n+\n+            res.status(201).json(transaction);\n+        }\n+\n+        if (transaction_type === 'ipl'){\n+\n+            if (!house) {\n+                throw new Error('House not found');\n+            }\n+\n+           // console.log(related_months);\n+\n+            if (!Array.isArray(related_months)) {\n+                throw new Error('elatedMonths should be an array');\n+                //return res.status(400).json({ msg: 'relatedMonths should be an array' });\n+            }\n+\n+            // Create a new transaction\n+            const transaction = new Transaction({\n+                house_id: house._id,\n+                transaction_type,\n+                payment_type,\n+                amount,\n+                description,\n+                proof_of_transfer,\n+                related_months,\n+                created_by,\n+                status,\n+                date:paymentDate\n+            });\n+\n+            await transaction.save();\n+\n+            // Update the related monthly bills\n+            for (const month of related_months) {\n+                let  feeIndex = house.monthly_fees.findIndex(fee => fee.month === month);\n+\n+                if (feeIndex !== -1) {\n+                    // Update existing monthly fee\n+                    house.monthly_fees[feeIndex].status = 'Lunas';\n+                    house.monthly_fees[feeIndex].transaction_id = transaction._id;\n+                } else {\n+                    // Add new monthly fee\n+                    house.monthly_fees.push({\n+                        month,\n+                        fee: house.fee, // Use the fee from the house\n+                        status: 'Lunas',\n+                        transaction_id: transaction._id\n+                    });\n+                }\n+            }\n+            await house.save();\n+\n+            res.status(201).json(transaction);\n+        }\n+        \n+\n+        \n+    } catch (err) {\n+        console.error(err.message);\n+        res.status(500).send('Server error');\n+    }\n+});\n+\n+// Update an existing transaction\n+router.put('/update/:id', protect, checkRole(['admin', 'editor', 'superadmin']), async (req, res) => {\n+    const { house_id, transaction_type, payment_type, amount, description, proof_of_transfer, related_months, status } = req.body;\n+  \n+    try {\n+      let transaction = await Transaction.findById(req.params.id);\n+      if (!transaction) {\n+        return res.status(404).json({ message: 'Transaction not found' });\n+      }\n+  \n+      transaction.house_id = house_id;\n+      transaction.transaction_type = transaction_type;\n+      transaction.payment_type = payment_type;\n+      transaction.amount = amount;\n+      transaction.description = description;\n+      transaction.proof_of_transfer = proof_of_transfer;\n+      transaction.related_months = related_months;\n+      transaction.status = status;\n+  \n+      await transaction.save();\n+      res.status(200).json(transaction);\n+    } catch (err) {\n+      console.error(err.message);\n+      res.status(500).send('Server error');\n+    }\n+});\n+\n+// Route untuk menghapus transaksi\n+router.delete('/delete/:id', protect, checkRole(['admin', 'editor', 'superadmin']), async (req, res) => {\n+    try {\n+      const transaction = await Transaction.findById(req.params.id);\n+      if (!transaction) {\n+        return res.status(404).json({ message: 'Transaksi tidak ditemukan' });\n+      }\n+  \n+      // Cek jika transaksi terkait dengan house\n+      if (transaction.house_id) {\n+        const house = await House.findById(transaction.house_id);\n+        // if (house) {\n+        //   // Hapus transaksi dari house\n+        //   house.monthly_fees = house.monthly_fees.map(fee => {\n+        //     if (fee.transaction_id === transaction._id) {\n+        //       fee.status = 'Belum Bayar';\n+        //       fee.transaction_id = null;\n+        //     }\n+        //     return fee;\n+        //   });\n+        //   await house.save();\n+        // }\n+\n+        // Update the related monthly bills\n+        for (const month of transaction.related_months) {\n+            let  feeIndex = house.monthly_fees.findIndex(fee => fee.month === month);\n+\n+            if (feeIndex !== -1) {\n+                // Update existing monthly fee\n+                house.monthly_fees[feeIndex].status = 'Belum Bayar';\n+                house.monthly_fees[feeIndex].transaction_id = null;\n+            } \n+\n+            await house.save();\n+        }\n+      }\n+  \n+      // Hapus transaksi\n+      await transaction.deleteOne();\n+  \n+      res.status(200).json({ message: 'Transaksi berhasil dihapus' });\n+    } catch (err) {\n+      console.error(err.message);\n+      res.status(500).send('Server error');\n+    }\n+});\n+\n+router.get('/:id', async (req, res) => {\n+    try {\n+      const transaction = await Transaction.findById(req.params.id)\n+        .populate('created_by')\n+        .populate('house_id');\n+  \n+      if (!transaction) {\n+        return res.status(404).json({ message: 'Transaksi tidak ditemukan' });\n+      }\n+  \n+      const formattedTransaction = {\n+        ...transaction._doc,\n+        date: format(new Date(transaction.date), 'dd MMM yyyy'),\n+        created_at: format(new Date(transaction.created_at), 'dd MMM yyyy HH:mm:ss')\n+      };\n+  \n+      res.status(200).json(formattedTransaction);\n+    } catch (err) {\n+      console.error(err.message);\n+      res.status(500).send('Server error');\n+    }\n+  });\n+\n+// Route to get all transactions\n+router.get('/all', async (req, res) => {\n+    const { period } = req.query;\n+\n+    if(!period) {\n+        try {\n+            const transactions = await Transaction.find()\n+            .populate('created_by')\n+            .sort({ created_at: -1 });\n+            \n+            const formattedTransactions = transactions.map(transaction => ({\n+                ...transaction._doc,\n+                date: format(new Date(transaction.date), 'dd MMM yyyy'),\n+                created_at: format(new Date(transaction.created_at), 'dd MMM yyyy HH:mm:ss')\n+            }));\n+    \n+            if (transactions.length > 0 && transactions[0].created_at) {\n+            res.status(200).json({ data: formattedTransactions, lastUpdate: format(transactions[0].created_at, 'dd MMM yyyy HH:mm') });\n+            } else {\n+            res.status(200).json({ data: formattedTransactions });\n+            }\n+        } catch (err) {\n+            console.error(err.message);\n+            res.status(500).send('Server error');\n+        }\n+    } else {\n+        const [year, month] = period.split('-'); // Split the period into year and month\n+        const startDate = new Date(`${year}-${month}-01T00:00:00Z`);\n+        const endDate = new Date(startDate);\n+        endDate.setMonth(startDate.getMonth() + 1);\n+\n+        try {\n+            const transactions = await Transaction.find({\n+                date: {\n+                    $gte: startDate,\n+                    $lt: endDate\n+                }\n+            })\n+            .populate('created_by')\n+            .sort({ created_at: -1 });\n+            \n+            const formattedTransactions = transactions.map(transaction => ({\n+                ...transaction._doc,\n+                date: format(new Date(transaction.date), 'dd MMM yyyy'),\n+                created_at: format(new Date(transaction.created_at), 'dd MMM yyyy HH:mm:ss'),\n+            }));\n+    \n+            res.status(200).json({ data: formattedTransactions });\n+        } catch (err) {\n+            console.error(err.message);\n+            res.status(500).send('Server error');\n+        }\n+    }\n+});\n+\n+router.get('/filter', async (req, res) => {\n+    try {\n+        const { startDate, endDate } = req.query;\n+\n+        // Validasi tanggal\n+        if (!startDate || !endDate) {\n+            return res.status(400).json({ message: 'Both startDate and endDate are required' });\n+        }\n+\n+        const transactions = await Transaction.find({\n+            date: {\n+                $gte: new Date(startDate),\n+                $lte: new Date(endDate),\n+            },\n+        }).populate('house_id').populate('created_by');\n+\n+        const formattedTransactions = transactions.map(transaction => ({\n+            ...transaction._doc,\n+            date: format(new Date(transaction.date), 'dd MMM yyyy'),\n+            created_at: format(new Date(transaction.created_at), 'dd MMM yyyy HH:mm:ss')\n+          }));\n+\n+        res.status(200).json(formattedTransactions);\n+    } catch (error) {\n+        console.error('Error fetching transactions:', error);\n+        res.status(500).json({ message: 'Failed to fetch transactions' });\n+    }\n+});\n+\n+router.get('/balance', async (req, res) => {\n+    try {\n+        const incomeTransactions = await Transaction.aggregate([\n+            { $match: { transaction_type: { $in: ['income', 'ipl'] } } },\n+            { $group: { _id: null, totalIncome: { $sum: \"$amount\" } } }\n+        ]);\n+\n+        const expenseTransactions = await Transaction.aggregate([\n+            { $match: { transaction_type: 'expense' } },\n+            { $group: { _id: null, totalExpense: { $sum: \"$amount\" } } }\n+        ]);\n+\n+        const totalIncome = incomeTransactions[0]?.totalIncome || 0;\n+        const totalExpense = expenseTransactions[0]?.totalExpense || 0;\n+        const totalBalance = totalIncome - totalExpense;\n+\n+        res.json({ totalIncome, totalExpense, totalBalance });\n+    } catch (error) {\n+        console.error('Error calculating total balance:', error);\n+        res.status(500).json({ error: 'Error calculating total balance' });\n+    }\n+});\n+\n+router.get('/balance-monthly', async (req, res) => {\n+    const { period } = req.query; // Mengambil parameter period\n+\n+    if (!period) {\n+        return res.status(400).json({ error: 'Period is required' });\n+    }\n+\n+    const [year, month] = period.split('-'); // Memisahkan tahun dan bulan\n+\n+    if (!year || !month) {\n+        return res.status(400).json({ error: 'Invalid period format' });\n+    }\n+\n+    try {\n+        // Menghasilkan tanggal mulai dari periode yang diberikan\n+        const startDate = new Date(`${year}-${month}-01T00:00:00Z`);\n+        // Menghasilkan tanggal akhir, yaitu awal bulan berikutnya\n+        const endDate = new Date(startDate);\n+        endDate.setMonth(startDate.getMonth() + 1);\n+\n+        const monthlyBalances = await Transaction.aggregate([\n+            {\n+                $match: {\n+                    date: {\n+                        $gte: startDate,\n+                        $lt: endDate\n+                    }\n+                }\n+            },\n+            {\n+                $group: {\n+                    _id: null,\n+                    totalIncome: {\n+                        $sum: {\n+                            $cond: [{ $in: [\"$transaction_type\", [\"income\", \"ipl\"]] }, \"$amount\", 0]\n+                        }\n+                    },\n+                    totalExpense: {\n+                        $sum: {\n+                            $cond: [{ $eq: [\"$transaction_type\", \"expense\"] }, \"$amount\", 0]\n+                        }\n+                    }\n+                }\n+            },\n+            {\n+                $project: {\n+                    totalIncome: 1,\n+                    totalExpense: 1,\n+                    totalBalance: { $subtract: [\"$totalIncome\", \"$totalExpense\"] }\n+                }\n+            }\n+        ]);\n+\n+        // Mengirimkan hasil agregasi\n+        res.json(monthlyBalances.length > 0 ? monthlyBalances : [{ totalIncome: 0, totalExpense: 0, totalBalance: 0 }]);\n+    } catch (error) {\n+        console.error('Error calculating monthly total balance:', error);\n+        res.status(500).json({ error: 'Error calculating monthly total balance' });\n+    }\n+});\n+\n+\n+module.exports = router;\n"
                },
                {
                    "date": 1722415941979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -170,30 +170,8 @@\n       res.status(500).send('Server error');\n     }\n });\n \n-router.get('/:id', async (req, res) => {\n-    try {\n-      const transaction = await Transaction.findById(req.params.id)\n-        .populate('created_by')\n-        .populate('house_id');\n-  \n-      if (!transaction) {\n-        return res.status(404).json({ message: 'Transaksi tidak ditemukan' });\n-      }\n-  \n-      const formattedTransaction = {\n-        ...transaction._doc,\n-        date: format(new Date(transaction.date), 'dd MMM yyyy'),\n-        created_at: format(new Date(transaction.created_at), 'dd MMM yyyy HH:mm:ss')\n-      };\n-  \n-      res.status(200).json(formattedTransaction);\n-    } catch (err) {\n-      console.error(err.message);\n-      res.status(500).send('Server error');\n-    }\n-  });\n \n // Route to get all transactions\n router.get('/all', async (req, res) => {\n     const { period } = req.query;\n@@ -248,352 +226,31 @@\n         }\n     }\n });\n \n-router.get('/filter', async (req, res) => {\n+router.get('/:id', async (req, res) => {\n     try {\n-        const { startDate, endDate } = req.query;\n-\n-        // Validasi tanggal\n-        if (!startDate || !endDate) {\n-            return res.status(400).json({ message: 'Both startDate and endDate are required' });\n-        }\n-\n-        const transactions = await Transaction.find({\n-            date: {\n-                $gte: new Date(startDate),\n-                $lte: new Date(endDate),\n-            },\n-        }).populate('house_id').populate('created_by');\n-\n-        const formattedTransactions = transactions.map(transaction => ({\n-            ...transaction._doc,\n-            date: format(new Date(transaction.date), 'dd MMM yyyy'),\n-            created_at: format(new Date(transaction.created_at), 'dd MMM yyyy HH:mm:ss')\n-          }));\n-\n-        res.status(200).json(formattedTransactions);\n-    } catch (error) {\n-        console.error('Error fetching transactions:', error);\n-        res.status(500).json({ message: 'Failed to fetch transactions' });\n-    }\n-});\n-\n-router.get('/balance', async (req, res) => {\n-    try {\n-        const incomeTransactions = await Transaction.aggregate([\n-            { $match: { transaction_type: { $in: ['income', 'ipl'] } } },\n-            { $group: { _id: null, totalIncome: { $sum: \"$amount\" } } }\n-        ]);\n-\n-        const expenseTransactions = await Transaction.aggregate([\n-            { $match: { transaction_type: 'expense' } },\n-            { $group: { _id: null, totalExpense: { $sum: \"$amount\" } } }\n-        ]);\n-\n-        const totalIncome = incomeTransactions[0]?.totalIncome || 0;\n-        const totalExpense = expenseTransactions[0]?.totalExpense || 0;\n-        const totalBalance = totalIncome - totalExpense;\n-\n-        res.json({ totalIncome, totalExpense, totalBalance });\n-    } catch (error) {\n-        console.error('Error calculating total balance:', error);\n-        res.status(500).json({ error: 'Error calculating total balance' });\n-    }\n-});\n-\n-router.get('/balance-monthly', async (req, res) => {\n-    const { period } = req.query; // Mengambil parameter period\n-\n-    if (!period) {\n-        return res.status(400).json({ error: 'Period is required' });\n-    }\n-\n-    const [year, month] = period.split('-'); // Memisahkan tahun dan bulan\n-\n-    if (!year || !month) {\n-        return res.status(400).json({ error: 'Invalid period format' });\n-    }\n-\n-    try {\n-        // Menghasilkan tanggal mulai dari periode yang diberikan\n-        const startDate = new Date(`${year}-${month}-01T00:00:00Z`);\n-        // Menghasilkan tanggal akhir, yaitu awal bulan berikutnya\n-        const endDate = new Date(startDate);\n-        endDate.setMonth(startDate.getMonth() + 1);\n-\n-        const monthlyBalances = await Transaction.aggregate([\n-            {\n-                $match: {\n-                    date: {\n-                        $gte: startDate,\n-                        $lt: endDate\n-                    }\n-                }\n-            },\n-            {\n-                $group: {\n-                    _id: null,\n-                    totalIncome: {\n-                        $sum: {\n-                            $cond: [{ $in: [\"$transaction_type\", [\"income\", \"ipl\"]] }, \"$amount\", 0]\n-                        }\n-                    },\n-                    totalExpense: {\n-                        $sum: {\n-                            $cond: [{ $eq: [\"$transaction_type\", \"expense\"] }, \"$amount\", 0]\n-                        }\n-                    }\n-                }\n-            },\n-            {\n-                $project: {\n-                    totalIncome: 1,\n-                    totalExpense: 1,\n-                    totalBalance: { $subtract: [\"$totalIncome\", \"$totalExpense\"] }\n-                }\n-            }\n-        ]);\n-\n-        // Mengirimkan hasil agregasi\n-        res.json(monthlyBalances.length > 0 ? monthlyBalances : [{ totalIncome: 0, totalExpense: 0, totalBalance: 0 }]);\n-    } catch (error) {\n-        console.error('Error calculating monthly total balance:', error);\n-        res.status(500).json({ error: 'Error calculating monthly total balance' });\n-    }\n-});\n-\n-\n-module.exports = router;\n-const express = require('express');\n-const router = express.Router();\n-const mongoose = require('mongoose');\n-const House = require('../models/house');\n-const Transaction = require('../models/transaction');\n-const protect = require('./protect');\n-const checkRole = require('./checkRole');\n-const { format } = require('date-fns');\n-\n-\n-\n-// Create a new transaction\n-router.post('/create', protect, checkRole(['admin', 'editor','superadmin']), async (req, res) => {\n-    const { houseId, transaction_type, payment_type, amount, description, proof_of_transfer, related_months,status,paymentDate  } = req.body;\n-    const created_by = req.user._id;\n-    try {\n-        // Find the house\n-\n-        //const houseId = req.body.houseId;\n-       // console.log('houseId:', houseId);\n-        const house = await House.findOne({ house_id: houseId });\n-        //console.log(house)\n-        if(transaction_type !== 'ipl') {\n-            const transaction = new Transaction({\n-                transaction_type,\n-                payment_type,\n-                amount,\n-                description,\n-                proof_of_transfer,\n-                created_by,\n-                status,\n-                date:paymentDate\n-            });\n-    \n-            await transaction.save();\n-\n-            res.status(201).json(transaction);\n-        }\n-\n-        if (transaction_type === 'ipl'){\n-\n-            if (!house) {\n-                throw new Error('House not found');\n-            }\n-\n-           // console.log(related_months);\n-\n-            if (!Array.isArray(related_months)) {\n-                throw new Error('elatedMonths should be an array');\n-                //return res.status(400).json({ msg: 'relatedMonths should be an array' });\n-            }\n-\n-            // Create a new transaction\n-            const transaction = new Transaction({\n-                house_id: house._id,\n-                transaction_type,\n-                payment_type,\n-                amount,\n-                description,\n-                proof_of_transfer,\n-                related_months,\n-                created_by,\n-                status,\n-                date:paymentDate\n-            });\n-\n-            await transaction.save();\n-\n-            // Update the related monthly bills\n-            for (const month of related_months) {\n-                let  feeIndex = house.monthly_fees.findIndex(fee => fee.month === month);\n-\n-                if (feeIndex !== -1) {\n-                    // Update existing monthly fee\n-                    house.monthly_fees[feeIndex].status = 'Lunas';\n-                    house.monthly_fees[feeIndex].transaction_id = transaction._id;\n-                } else {\n-                    // Add new monthly fee\n-                    house.monthly_fees.push({\n-                        month,\n-                        fee: house.fee, // Use the fee from the house\n-                        status: 'Lunas',\n-                        transaction_id: transaction._id\n-                    });\n-                }\n-            }\n-            await house.save();\n-\n-            res.status(201).json(transaction);\n-        }\n-        \n-\n-        \n-    } catch (err) {\n-        console.error(err.message);\n-        res.status(500).send('Server error');\n-    }\n-});\n-\n-// Update an existing transaction\n-router.put('/update/:id', protect, checkRole(['admin', 'editor', 'superadmin']), async (req, res) => {\n-    const { house_id, transaction_type, payment_type, amount, description, proof_of_transfer, related_months, status } = req.body;\n+      const transaction = await Transaction.findById(req.params.id)\n+        .populate('created_by')\n+        .populate('house_id');\n   \n-    try {\n-      let transaction = await Transaction.findById(req.params.id);\n       if (!transaction) {\n-        return res.status(404).json({ message: 'Transaction not found' });\n-      }\n-  \n-      transaction.house_id = house_id;\n-      transaction.transaction_type = transaction_type;\n-      transaction.payment_type = payment_type;\n-      transaction.amount = amount;\n-      transaction.description = description;\n-      transaction.proof_of_transfer = proof_of_transfer;\n-      transaction.related_months = related_months;\n-      transaction.status = status;\n-  \n-      await transaction.save();\n-      res.status(200).json(transaction);\n-    } catch (err) {\n-      console.error(err.message);\n-      res.status(500).send('Server error');\n-    }\n-});\n-\n-// Route untuk menghapus transaksi\n-router.delete('/delete/:id', protect, checkRole(['admin', 'editor', 'superadmin']), async (req, res) => {\n-    try {\n-      const transaction = await Transaction.findById(req.params.id);\n-      if (!transaction) {\n         return res.status(404).json({ message: 'Transaksi tidak ditemukan' });\n       }\n   \n-      // Cek jika transaksi terkait dengan house\n-      if (transaction.house_id) {\n-        const house = await House.findById(transaction.house_id);\n-        // if (house) {\n-        //   // Hapus transaksi dari house\n-        //   house.monthly_fees = house.monthly_fees.map(fee => {\n-        //     if (fee.transaction_id === transaction._id) {\n-        //       fee.status = 'Belum Bayar';\n-        //       fee.transaction_id = null;\n-        //     }\n-        //     return fee;\n-        //   });\n-        //   await house.save();\n-        // }\n-\n-        // Update the related monthly bills\n-        for (const month of transaction.related_months) {\n-            let  feeIndex = house.monthly_fees.findIndex(fee => fee.month === month);\n-\n-            if (feeIndex !== -1) {\n-                // Update existing monthly fee\n-                house.monthly_fees[feeIndex].status = 'Belum Bayar';\n-                house.monthly_fees[feeIndex].transaction_id = null;\n-            } \n-\n-            await house.save();\n-        }\n-      }\n+      const formattedTransaction = {\n+        ...transaction._doc,\n+        date: format(new Date(transaction.date), 'dd MMM yyyy'),\n+        created_at: format(new Date(transaction.created_at), 'dd MMM yyyy HH:mm:ss')\n+      };\n   \n-      // Hapus transaksi\n-      await transaction.deleteOne();\n-  \n-      res.status(200).json({ message: 'Transaksi berhasil dihapus' });\n+      res.status(200).json(formattedTransaction);\n     } catch (err) {\n       console.error(err.message);\n       res.status(500).send('Server error');\n     }\n });\n \n-\n-// Route to get all transactions\n-router.get('/all', async (req, res) => {\n-    const { period } = req.query;\n-\n-    if(!period) {\n-        try {\n-            const transactions = await Transaction.find()\n-            .populate('created_by')\n-            .sort({ created_at: -1 });\n-            \n-            const formattedTransactions = transactions.map(transaction => ({\n-                ...transaction._doc,\n-                date: format(new Date(transaction.date), 'dd MMM yyyy'),\n-                created_at: format(new Date(transaction.created_at), 'dd MMM yyyy HH:mm:ss')\n-            }));\n-    \n-            if (transactions.length > 0 && transactions[0].created_at) {\n-            res.status(200).json({ data: formattedTransactions, lastUpdate: format(transactions[0].created_at, 'dd MMM yyyy HH:mm') });\n-            } else {\n-            res.status(200).json({ data: formattedTransactions });\n-            }\n-        } catch (err) {\n-            console.error(err.message);\n-            res.status(500).send('Server error');\n-        }\n-    } else {\n-        const [year, month] = period.split('-'); // Split the period into year and month\n-        const startDate = new Date(`${year}-${month}-01T00:00:00Z`);\n-        const endDate = new Date(startDate);\n-        endDate.setMonth(startDate.getMonth() + 1);\n-\n-        try {\n-            const transactions = await Transaction.find({\n-                date: {\n-                    $gte: startDate,\n-                    $lt: endDate\n-                }\n-            })\n-            .populate('created_by')\n-            .sort({ created_at: -1 });\n-            \n-            const formattedTransactions = transactions.map(transaction => ({\n-                ...transaction._doc,\n-                date: format(new Date(transaction.date), 'dd MMM yyyy'),\n-                created_at: format(new Date(transaction.created_at), 'dd MMM yyyy HH:mm:ss'),\n-            }));\n-    \n-            res.status(200).json({ data: formattedTransactions });\n-        } catch (err) {\n-            console.error(err.message);\n-            res.status(500).send('Server error');\n-        }\n-    }\n-});\n-\n router.get('/filter', async (req, res) => {\n     try {\n         const { startDate, endDate } = req.query;\n \n"
                },
                {
                    "date": 1722416627578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -226,30 +226,8 @@\n         }\n     }\n });\n \n-router.get('/:id', async (req, res) => {\n-    try {\n-      const transaction = await Transaction.findById(req.params.id)\n-        .populate('created_by')\n-        .populate('house_id');\n-  \n-      if (!transaction) {\n-        return res.status(404).json({ message: 'Transaksi tidak ditemukan' });\n-      }\n-  \n-      const formattedTransaction = {\n-        ...transaction._doc,\n-        date: format(new Date(transaction.date), 'dd MMM yyyy'),\n-        created_at: format(new Date(transaction.created_at), 'dd MMM yyyy HH:mm:ss')\n-      };\n-  \n-      res.status(200).json(formattedTransaction);\n-    } catch (err) {\n-      console.error(err.message);\n-      res.status(500).send('Server error');\n-    }\n-});\n \n router.get('/filter', async (req, res) => {\n     try {\n         const { startDate, endDate } = req.query;\n@@ -362,6 +340,29 @@\n         res.status(500).json({ error: 'Error calculating monthly total balance' });\n     }\n });\n \n+router.get('/:id', async (req, res) => {\n+    try {\n+      const transaction = await Transaction.findById(req.params.id)\n+        .populate('created_by')\n+        .populate('house_id');\n+  \n+      if (!transaction) {\n+        return res.status(404).json({ message: 'Transaksi tidak ditemukan' });\n+      }\n+  \n+      const formattedTransaction = {\n+        ...transaction._doc,\n+        date: format(new Date(transaction.date), 'dd MMM yyyy'),\n+        created_at: format(new Date(transaction.created_at), 'dd MMM yyyy HH:mm:ss')\n+      };\n+  \n+      res.status(200).json(formattedTransaction);\n+    } catch (err) {\n+      console.error(err.message);\n+      res.status(500).send('Server error');\n+    }\n+});\n \n+\n module.exports = router;\n"
                }
            ],
            "date": 1722400977265,
            "name": "Commit-0",
            "content": "const express = require('express');\nconst router = express.Router();\nconst mongoose = require('mongoose');\nconst House = require('../models/house');\nconst Transaction = require('../models/transaction');\nconst protect = require('./protect');\nconst checkRole = require('./checkRole');\nconst { format } = require('date-fns');\n\n\n\n// Create a new transaction\nrouter.post('/create', protect, checkRole(['admin', 'editor','superadmin']), async (req, res) => {\n    const { houseId, transaction_type, payment_type, amount, description, proof_of_transfer, related_months,status,paymentDate  } = req.body;\n    const created_by = req.user._id;\n    try {\n        // Find the house\n\n        //const houseId = req.body.houseId;\n       // console.log('houseId:', houseId);\n        const house = await House.findOne({ house_id: houseId });\n        //console.log(house)\n        if(transaction_type !== 'ipl') {\n            const transaction = new Transaction({\n                transaction_type,\n                payment_type,\n                amount,\n                description,\n                proof_of_transfer,\n                created_by,\n                status,\n                date:paymentDate\n            });\n    \n            await transaction.save();\n\n            res.status(201).json(transaction);\n        }\n\n        if (transaction_type === 'ipl'){\n\n            if (!house) {\n                throw new Error('House not found');\n            }\n\n           // console.log(related_months);\n\n            if (!Array.isArray(related_months)) {\n                throw new Error('elatedMonths should be an array');\n                //return res.status(400).json({ msg: 'relatedMonths should be an array' });\n            }\n\n            // Create a new transaction\n            const transaction = new Transaction({\n                house_id: house._id,\n                transaction_type,\n                payment_type,\n                amount,\n                description,\n                proof_of_transfer,\n                related_months,\n                created_by,\n                status,\n                date:paymentDate\n            });\n\n            await transaction.save();\n\n            // Update the related monthly bills\n            for (const month of related_months) {\n                let  feeIndex = house.monthly_fees.findIndex(fee => fee.month === month);\n\n                if (feeIndex !== -1) {\n                    // Update existing monthly fee\n                    house.monthly_fees[feeIndex].status = 'Lunas';\n                    house.monthly_fees[feeIndex].transaction_id = transaction._id;\n                } else {\n                    // Add new monthly fee\n                    house.monthly_fees.push({\n                        month,\n                        fee: house.fee, // Use the fee from the house\n                        status: 'Lunas',\n                        transaction_id: transaction._id\n                    });\n                }\n            }\n            await house.save();\n\n            res.status(201).json(transaction);\n        }\n        \n\n        \n    } catch (err) {\n        console.error(err.message);\n        res.status(500).send('Server error');\n    }\n});\n\n// Update an existing transaction\nrouter.put('/update/:id', protect, checkRole(['admin', 'editor', 'superadmin']), async (req, res) => {\n    const { house_id, transaction_type, payment_type, amount, description, proof_of_transfer, related_months, status } = req.body;\n  \n    try {\n      let transaction = await Transaction.findById(req.params.id);\n      if (!transaction) {\n        return res.status(404).json({ msg: 'Transaction not found' });\n      }\n  \n      transaction.house_id = house_id;\n      transaction.transaction_type = transaction_type;\n      transaction.payment_type = payment_type;\n      transaction.amount = amount;\n      transaction.description = description;\n      transaction.proof_of_transfer = proof_of_transfer;\n      transaction.related_months = related_months;\n      transaction.status = status;\n  \n      await transaction.save();\n      res.status(200).json(transaction);\n    } catch (err) {\n      console.error(err.message);\n      res.status(500).send('Server error');\n    }\n});\n\n// Route untuk menghapus transaksi\nrouter.delete('/delete/:id', protect, checkRole(['admin', 'editor', 'superadmin']), async (req, res) => {\n    try {\n      const transaction = await Transaction.findById(req.params.id);\n      if (!transaction) {\n        return res.status(404).json({ message: 'Transaksi tidak ditemukan' });\n      }\n  \n      // Cek jika transaksi terkait dengan house\n      if (transaction.house_id) {\n        const house = await House.findById(transaction.house_id);\n        if (house) {\n          // Hapus transaksi dari house\n          house.monthly_fees = house.monthly_fees.filter(fee => fee.transaction_id !== transaction._id);\n          await house.save();\n        }\n      }\n  \n      // Hapus transaksi\n      await transaction.remove();\n  \n      res.status(200).json({ message: 'Transaksi berhasil dihapus' });\n    } catch (err) {\n      console.error(err.message);\n      res.status(500).send('Server error');\n    }\n});\n\n\n// Route to get all transactions\nrouter.get('/all', async (req, res) => {\n    const { period } = req.query;\n\n    if(!period) {\n        try {\n            const transactions = await Transaction.find()\n            .populate('created_by')\n            .sort({ created_at: -1 });\n            \n            const formattedTransactions = transactions.map(transaction => ({\n                ...transaction._doc,\n                date: format(new Date(transaction.date), 'dd MMM yyyy'),\n                created_at: format(new Date(transaction.created_at), 'dd MMM yyyy HH:mm:ss')\n            }));\n    \n            res.status(200).json({ data: formattedTransactions, lastUpdate: format(transactions[0].created_at, 'dd MMM yyyy HH:mm') });\n        } catch (err) {\n            console.error(err.message);\n            res.status(500).send('Server error');\n        }\n    } else {\n        const [year, month] = period.split('-'); // Split the period into year and month\n        const startDate = new Date(`${year}-${month}-01T00:00:00Z`);\n        const endDate = new Date(startDate);\n        endDate.setMonth(startDate.getMonth() + 1);\n\n        try {\n            const transactions = await Transaction.find({\n                date: {\n                    $gte: startDate,\n                    $lt: endDate\n                }\n            })\n            .populate('created_by')\n            .sort({ created_at: -1 });\n            \n            const formattedTransactions = transactions.map(transaction => ({\n                ...transaction._doc,\n                date: format(new Date(transaction.date), 'dd MMM yyyy'),\n                created_at: format(new Date(transaction.created_at), 'dd MMM yyyy HH:mm:ss'),\n            }));\n    \n            res.status(200).json({ data: formattedTransactions });\n        } catch (err) {\n            console.error(err.message);\n            res.status(500).send('Server error');\n        }\n    }\n});\n\nrouter.get('/filter', async (req, res) => {\n    try {\n        const { startDate, endDate } = req.query;\n\n        // Validasi tanggal\n        if (!startDate || !endDate) {\n            return res.status(400).json({ message: 'Both startDate and endDate are required' });\n        }\n\n        const transactions = await Transaction.find({\n            date: {\n                $gte: new Date(startDate),\n                $lte: new Date(endDate),\n            },\n        }).populate('house_id').populate('created_by');\n\n        const formattedTransactions = transactions.map(transaction => ({\n            ...transaction._doc,\n            date: format(new Date(transaction.date), 'dd MMM yyyy'),\n            created_at: format(new Date(transaction.created_at), 'dd MMM yyyy HH:mm:ss')\n          }));\n\n        res.status(200).json(formattedTransactions);\n    } catch (error) {\n        console.error('Error fetching transactions:', error);\n        res.status(500).json({ message: 'Failed to fetch transactions' });\n    }\n});\n\nrouter.get('/balance', async (req, res) => {\n    try {\n        const incomeTransactions = await Transaction.aggregate([\n            { $match: { transaction_type: { $in: ['income', 'ipl'] } } },\n            { $group: { _id: null, totalIncome: { $sum: \"$amount\" } } }\n        ]);\n\n        const expenseTransactions = await Transaction.aggregate([\n            { $match: { transaction_type: 'expense' } },\n            { $group: { _id: null, totalExpense: { $sum: \"$amount\" } } }\n        ]);\n\n        const totalIncome = incomeTransactions[0]?.totalIncome || 0;\n        const totalExpense = expenseTransactions[0]?.totalExpense || 0;\n        const totalBalance = totalIncome - totalExpense;\n\n        res.json({ totalIncome, totalExpense, totalBalance });\n    } catch (error) {\n        console.error('Error calculating total balance:', error);\n        res.status(500).json({ error: 'Error calculating total balance' });\n    }\n});\n\nrouter.get('/balance-monthly', async (req, res) => {\n    const { period } = req.query; // Mengambil parameter period\n\n    if (!period) {\n        return res.status(400).json({ error: 'Period is required' });\n    }\n\n    const [year, month] = period.split('-'); // Memisahkan tahun dan bulan\n\n    if (!year || !month) {\n        return res.status(400).json({ error: 'Invalid period format' });\n    }\n\n    try {\n        // Menghasilkan tanggal mulai dari periode yang diberikan\n        const startDate = new Date(`${year}-${month}-01T00:00:00Z`);\n        // Menghasilkan tanggal akhir, yaitu awal bulan berikutnya\n        const endDate = new Date(startDate);\n        endDate.setMonth(startDate.getMonth() + 1);\n\n        const monthlyBalances = await Transaction.aggregate([\n            {\n                $match: {\n                    date: {\n                        $gte: startDate,\n                        $lt: endDate\n                    }\n                }\n            },\n            {\n                $group: {\n                    _id: null,\n                    totalIncome: {\n                        $sum: {\n                            $cond: [{ $in: [\"$transaction_type\", [\"income\", \"ipl\"]] }, \"$amount\", 0]\n                        }\n                    },\n                    totalExpense: {\n                        $sum: {\n                            $cond: [{ $eq: [\"$transaction_type\", \"expense\"] }, \"$amount\", 0]\n                        }\n                    }\n                }\n            },\n            {\n                $project: {\n                    totalIncome: 1,\n                    totalExpense: 1,\n                    totalBalance: { $subtract: [\"$totalIncome\", \"$totalExpense\"] }\n                }\n            }\n        ]);\n\n        // Mengirimkan hasil agregasi\n        res.json(monthlyBalances.length > 0 ? monthlyBalances : [{ totalIncome: 0, totalExpense: 0, totalBalance: 0 }]);\n    } catch (error) {\n        console.error('Error calculating monthly total balance:', error);\n        res.status(500).json({ error: 'Error calculating monthly total balance' });\n    }\n});\n\n\nmodule.exports = router;\n"
        }
    ]
}